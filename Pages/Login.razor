@page "/login"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using OpenBankClient.Data.Models
@using OpenBankClient.Data.Services
@using OpenBankClient.Data.Services.Base
@using OpenBankClient.Data.Services.Interfaces
@inject IUsersService _usersService
@inject NavigationManager Navigation
@inject ProtectedLocalStorage _localStorage
@inject IStringLocalizer<Login> Loc

<div class="row">
    <div class="col-5 shadow-lg p-5 border m-2 border-opacity-25 bg-light bg-gradient">
        <AuthorizeView>
            <Authorized>
                <h2 class="text-center mb-3">@Loc["Login"]</h2>
                <p>@Loc["Login message"]</p>
                <div class="w-50">
                    <UserCard></UserCard>
                </div>
            </Authorized>
            <NotAuthorized Context="authContext">
                <h2 class="text-center mb-3">@Loc["Login"]</h2>
                <EditForm Model="@loginUser" OnSubmit="@LoginMethod">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <p>
                        <div class="input-group mb-3">
                            <span class="input-group-text" id="basic-addon1">@Loc["Username"]</span>
                            <InputText type="text" class="form-control" aria-label="Username" aria-describedby="basic-addon1" @bind-Value="loginUser.Username"/>
                        </div>
                    </p>
                    <p>
                        <div class="input-group mb-3">
                            <span class="input-group-text" id="basic-addon1">@Loc["Password"]</span>
                            <InputText type="Password" class="form-control" aria-label="Username" aria-describedby="basic-addon1" @bind-Value="loginUser.Password"/>
                        </div>
                    </p>
                    <button class="btn btn-outline-dark"type="submit">@Loc["Login2"]</button>

                </EditForm>
            </NotAuthorized>
        </AuthorizeView>
    </div>
    @if(response.Item1 == false)
    {
    }
</div>


@code {
    public User loginUser { get; set; } = new();
    private (bool, LoginUserResponse?, string?) response;

    public async Task LoginMethod()
    {
        response = await _usersService.LoginAsync(loginUser);
        if (!response.Item1)
        {
            StateHasChanged();
            return;
        }
        Navigation.NavigateTo("/accounts");
    }

}
