@attribute [Authorize]
@page "/transfers"
@inject AccountsService _accountsService
@inject TransfersService _transfersService
@inject ILogger<Transfers> _logger
@using OpenBankClient.Data.Services
@using OpenBankClient.Data.Services.Base

    <h3>Transfers</h3>
    @if(accounts != null)
    {
        <div class="row w-50 mt-5 shadow-lg p-5 border m-2 border-opacity-25">
             <EditForm Model="@transferRequest" OnSubmit="@MakeTransfer">
                 <div class="input-group mb-3">
                    <select class="form-select" aria-label="accountSelect" id="accountSelect" @bind="transferRequest.FromAccount">
                        @foreach(AccountResponse account in accounts)
                        {
                            <option value="@account.Id">@account.Id</option>
                        }
                    </select>
                    <label class="input-group-text" for="accountSelect">Account</label>
                 </div>
                <div class="mb-3">
                    <label for="exampleFormControlInput1" class="form-label">Transfer to account nr</label>
                    <input @bind-value="transferRequest.ToAccount" type="number" class="form-control" id="exampleFormControlInput1" placeholder="account number">
                </div>
                <div class="mb-3">
                    <label for="exampleFormControlInput1" class="form-label">Amount</label>
                    <input @bind-value="transferRequest.Amount" type="number" class="form-control" id="exampleFormControlInput1" placeholder="amount">
                </div>
                @if(OperationStatus != "Transfer Succeded")
                {
                    <button class="btn btn-outline-dark"type="submit">Transfer </button>
                }
                @if(OperationStatus == "Transfer Succeded")
                {
                    <div class="alert alert-success mt-3" role="alert">
                        @OperationStatus
                    </div>
                }
                @if(OperationStatus == "transfer failed")
                {
                    <div class="alert alert-danger mt-3" role="alert">
                        @OperationError
                    </div>
                }
            </EditForm>
        </div>
     }


        @code {
        private List<AccountResponse>? accounts;
        private TransferRequest transferRequest = new();
        private string OperationStatus = "";
        private string OperationError = "";

        protected async override Task OnInitializedAsync()
        {
            var response = await _accountsService.GetAllAccounts();

            if (!response.Item1)
                return;
            accounts = (List<AccountResponse>)response.Item2!;
            _logger.LogInformation("after renderer");
        }
        public async void MakeTransfer()
        {
            var response = await _transfersService.Transfer(transferRequest);
            if (!response.Item1)
            {
                OperationStatus = "transfer failed";
                OperationError = response.Item2;
                StateHasChanged();
                return;
            }
            OperationStatus = "Transfer Succeded";
            StateHasChanged();
        }

}
