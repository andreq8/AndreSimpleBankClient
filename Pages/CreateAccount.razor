@attribute [Authorize]
@page "/create-account"
@using OpenBankClient.Data.Models
@using OpenBankClient.Data.Services
@using OpenBankClient.Data.Services.Base
@using OpenBankClient.Data.Services.Interfaces
@inject IAccountsService _accountService
@inject NavigationManager _navigationManager
@inject IStringLocalizer<CreateAccount> Loc

<h3>@Loc["Create Account"]</h3>

<div class="row w-50 mt-5 shadow-lg p-5 border m-2 border-opacity-25">
    <EditForm Model="@accountRequest" OnSubmit="@SendAccountRequest">
        <div class="input-group mb-3">
            <select class="form-select" aria-label="accountSelect" id="accountSelect" @bind="accountRequest.Currency">
                @foreach (Currency currency in Enum.GetValues<Currency>())
                {
                    <option value="@currency">@currency</option>
                }
            </select>
            <label class="input-group-text" for="accountSelect">@Loc["Currency"]</label>
        </div>
        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">@Loc["Amount"]</label>
            <input @bind-value="accountRequest.Amount" type="number" class="form-control" id="exampleFormControlInput1" placeholder="0">
        </div>
        <button class="btn btn-outline-dark" type="submit">@Loc["Create Account"]</button>
    </EditForm>

</div>


@code {
    private Data.Models.CreateAccount accountRequest = new();

    [CascadingParameter]
    public EventCallback SessionStatusEvent { get; set; }


    private async void SendAccountRequest()
    {
        var response = await _accountService.CreateAccountAsync(accountRequest);
        if (response.Item3 == "token expired")
        {
            await SessionStatusEvent.InvokeAsync();
            return;
        }
        if (!response.Item1)
            return;

        StateHasChanged();
        _navigationManager.NavigateTo("/accounts");
    }
}
